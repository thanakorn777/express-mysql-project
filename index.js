require('dotenv').config();
const express = require('express');
const mysql = require('mysql2');
const path = require('path');
const db = require('./db');
const bcrypt = require('bcrypt');
const session = require('express-session');
const { error } = require('console');

const app = express();
const port = 3000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Session setup
app.use(session({
  secret: process.env.SESSION_SECRET, // Use the secret from .env
  resave: false,
  saveUninitialized: false
}));

// MySQL connection
const connection = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT,
});

connection.connect(err => {
  if (err) {
    console.error('MySQL connection error:', err);
    return;
  }
  console.log('Connected to MySQL database');
});

// ‚úÖ Middleware ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login
function requireLogin(req, res, next) {
  if (!req.session.user) {
    return res.redirect('/');
  }
  next();
}

// ‚úÖ Middleware ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏° role
function requireRole(role) {
  return function (req, res, next) {
    if (!req.session.user || req.session.user.role !== role) {
      return res.status(403).send('üö´ Access denied');
    }
    next();
  };
}

// ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
app.get('/dashboard_information.html', requireLogin, requireRole('admin'), (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'dashboard_information.html'));
});

app.get('/dashboard_report.html', requireLogin, requireRole('admin'), (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'dashboard_report.html'));
});

// ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ report_issue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
app.get('/user_main.html', requireLogin, requireRole('user'), (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'user_main.html'));
});

// ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ login ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

// ‚úÖ Login (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const [rows] = await db.query('SELECT * FROM users WHERE email = ?', [email]);

    if (rows.length === 0) {
      return res.status(401).send('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    const user = rows[0];

    const match = await bcrypt.compare(password.trim(), user.password);

    if (!match) {
      return res.status(401).send('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° role ‡πÄ‡∏Ç‡πâ‡∏≤ session
    req.session.user = {
      id: user.id,
      email: user.email,
      role: user.role  // <<==== ‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    };

    // üëâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° role
    if (user.role === 'admin') {
      res.redirect('/dashboard_information.html');
    } else {
      res.redirect('user_main.html');
    }

  } catch (err) {
    console.error('üî• login error:', err);
    res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
  }
});

// ‚úÖ Logout
app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/');
  });
});

// ‚úÖ API Users
app.get('/user', (req, res) => res.send('GET user'));
app.put('/user', (req, res) => res.send('PUT user'));
app.patch('/user', (req, res) => res.send('PATCH user'));
app.delete('/user', (req, res) => res.send('DELETE user'));

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
app.post('/user', async (req, res) => {
  const { email, password } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    await db.query(
      'INSERT INTO users (email, password) VALUES (?, ?)',
      [email, hashedPassword]
    );
    res.status(201).send('User created');
  } catch (err) {
    console.error(err);
    res.status(500).send('Error saving user');
  }
});

// ‚úÖ Dashboard API
app.get('/dashboard_data', async (req, res) => {
  try {
    const [rows] = await db.query('SELECT * FROM dashboard_information ORDER BY created_at DESC');
    res.json(rows);
  } catch (err) {
    console.error(err);
    res.status(500).send('Error fetching dashboard data');
  }
});

app.get('/dashboard_count', async (req, res) => {
  try {
    const [rows] = await db.query('SELECT COUNT(*) as total FROM dashboard_information');
    res.json({ count: rows[0].total });
  } catch (err) {
    console.error('Error counting records:', err);
    res.status(500).send('Error counting records');
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
app.post('/dashboard_information', async (req, res) => {
  const { floor, department, ip_address, device, tel, note } = req.body;
  try {
    await db.query(
      'INSERT INTO dashboard_information (floor, department, ip_address, device, tel, note) VALUES (?, ?, ?, ?, ?, ?)',
      [floor, department, ip_address, device, tel, note]
    );
    res.redirect('/dashboard_information.html');
  } catch (err) {
    console.error(err);
    res.status(500).send('Error saving device');
  }
});

// ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
app.delete('/dashboard_information/:id', async (req, res) => {
  const id = req.params.id;
  const sql = 'DELETE FROM dashboard_information WHERE id = ?';

  try {
    const [result] = await db.query(sql, [id]);
    console.log('‚úÖ Deleted ID:', id);
    res.status(200).send('Deleted');
  } catch (err) {
    console.error('‚ùå Error deleting data:', err);
    res.status(500).send('Error deleting data');
  }
});

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
app.put('/dashboard_information/:id', async (req, res) => {
  const id = req.params.id;
  const { floor, department, ip_address, device, tel, note } = req.body;

  console.log('üì¶ Data received for update:', req.body);

  const sql = `
    UPDATE dashboard_information
    SET floor = ?, department = ?, ip_address = ?, device = ?, tel = ?, note = ?
    WHERE id = ?
  `;
  const values = [floor, department, ip_address, device, tel, note, id];

  try {
    const [result] = await db.query(sql, values); // ‡πÉ‡∏ä‡πâ async/await
    console.log('üîÑ Update result:', result);
    res.status(200).send('Updated');
  } catch (err) {
    console.error('üî• Error updating data:', err);
    res.status(500).send('Error updating data');
  }
});

// ‚úÖ API Endpoint /report_issue
app.post('/report_issue', async (req, res) => {
  const { name, department, ip_address, tel, note, status } = req.body;
  
  // üêû debug ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
  console.log('üëâ Session user role:', req.session.user?.role);
  
    try {
      await db.query(
        'INSERT INTO dashboard_report (name, department, ip_address, tel, note, status) VALUES (?, ?, ?, ?, ?, ?)',
        [name, department, ip_address, tel, note, status]
      );
  
      // ‚úÖ redirect ‡∏ï‡∏≤‡∏° role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const userRole = req.session.user?.role;
  
      if (userRole === 'admin') {
        res.redirect('/dashboard_report.html');
      } else {
        res.redirect('/user_main.html');
      }
  
    } catch (err) {
      console.error('‚ùå Error saving report issue:', err);
      res.status(500).send('Error saving report');
    }
  });

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô dashboard_report.html
app.get('/api/dashboard_report', async (req, res) => {
  try {
    const [rows] = await db.query('SELECT * FROM dashboard_report ORDER BY created_at DESC');
    res.json(rows);
  } catch (err) {
    console.error('‚ùå Error fetching dashboard report:', err);
    res.status(500).send('Error fetching report');
  }
});

// ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å dashboard_report
app.delete('/dashboard_report/:id', async (req, res) => {
  const id = req.params.id;
  const sql = 'DELETE FROM dashboard_report WHERE id = ?';

  try {
    const [result] = await db.query(sql, [id]);
    console.log('‚úÖ Deleted ID:', id);
    res.status(200).send('Deleted');
  } catch (err) {
    console.error('‚ùå Error deleting report:', err);
    res.status(500).send('Error deleting report');
  }
});

// ‚úÖ Start server
app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
